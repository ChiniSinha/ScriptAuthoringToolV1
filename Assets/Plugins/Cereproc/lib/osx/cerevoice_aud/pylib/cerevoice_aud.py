# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cerevoice_aud', [dirname(__file__)])
        except ImportError:
            import _cerevoice_aud
            return _cerevoice_aud
        if fp is not None:
            try:
                _mod = imp.load_module('_cerevoice_aud', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cerevoice_aud = swig_import_helper()
    del swig_import_helper
else:
    import _cerevoice_aud
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_cerevoice_aud.CPRC_SC_WAITING_swigconstant(_cerevoice_aud)
CPRC_SC_WAITING = _cerevoice_aud.CPRC_SC_WAITING

_cerevoice_aud.CPRC_SC_PLAYING_MID_swigconstant(_cerevoice_aud)
CPRC_SC_PLAYING_MID = _cerevoice_aud.CPRC_SC_PLAYING_MID

_cerevoice_aud.CPRC_SC_PLAYING_LAST_FRAME_swigconstant(_cerevoice_aud)
CPRC_SC_PLAYING_LAST_FRAME = _cerevoice_aud.CPRC_SC_PLAYING_LAST_FRAME

_cerevoice_aud.CPRC_SC_PLAYED_swigconstant(_cerevoice_aud)
CPRC_SC_PLAYED = _cerevoice_aud.CPRC_SC_PLAYED

_cerevoice_aud.CPRC_CUE_ERROR_swigconstant(_cerevoice_aud)
CPRC_CUE_ERROR = _cerevoice_aud.CPRC_CUE_ERROR

_cerevoice_aud.CPRC_CUE_OK_swigconstant(_cerevoice_aud)
CPRC_CUE_OK = _cerevoice_aud.CPRC_CUE_OK

_cerevoice_aud.CPRC_CUE_RESTART_swigconstant(_cerevoice_aud)
CPRC_CUE_RESTART = _cerevoice_aud.CPRC_CUE_RESTART

_cerevoice_aud.CPRC_SC_MONO_swigconstant(_cerevoice_aud)
CPRC_SC_MONO = _cerevoice_aud.CPRC_SC_MONO

_cerevoice_aud.CPRC_SC_STEREO_swigconstant(_cerevoice_aud)
CPRC_SC_STEREO = _cerevoice_aud.CPRC_SC_STEREO

def CPRC_sc_player_new(sample_rate):
    """CPRC_sc_player_new(int sample_rate) -> CPRC_sc_player *"""
    return _cerevoice_aud.CPRC_sc_player_new(sample_rate)

def CPRC_sc_player_delete(player):
    """CPRC_sc_player_delete(CPRC_sc_player * player)"""
    return _cerevoice_aud.CPRC_sc_player_delete(player)

def CPRC_sc_player_stream_time(player):
    """CPRC_sc_player_stream_time(CPRC_sc_player * player) -> double"""
    return _cerevoice_aud.CPRC_sc_player_stream_time(player)

def CPRC_sc_player_stream_duration(player):
    """CPRC_sc_player_stream_duration(CPRC_sc_player * player) -> double"""
    return _cerevoice_aud.CPRC_sc_player_stream_duration(player)

def CPRC_sc_player_samples_sent(player):
    """CPRC_sc_player_samples_sent(CPRC_sc_player * player) -> long"""
    return _cerevoice_aud.CPRC_sc_player_samples_sent(player)

def CPRC_sc_player_sample_rate(player):
    """CPRC_sc_player_sample_rate(CPRC_sc_player * player) -> int"""
    return _cerevoice_aud.CPRC_sc_player_sample_rate(player)

def CPRC_sc_audio_short(data, len):
    """CPRC_sc_audio_short(short * data, int len) -> CPRC_sc_audio *"""
    return _cerevoice_aud.CPRC_sc_audio_short(data, len)

def CPRC_sc_audio_short_disposable(data, len):
    """CPRC_sc_audio_short_disposable(short * data, int len) -> CPRC_sc_audio *"""
    return _cerevoice_aud.CPRC_sc_audio_short_disposable(data, len)

def CPRC_sc_audio_short_alloc(data, len, alloc):
    """CPRC_sc_audio_short_alloc(short * data, int len, int alloc) -> CPRC_sc_audio *"""
    return _cerevoice_aud.CPRC_sc_audio_short_alloc(data, len, alloc)

def CPRC_sc_audio_pythonstr(data, len):
    """CPRC_sc_audio_pythonstr(wavedata * data, int len) -> CPRC_sc_audio *"""
    return _cerevoice_aud.CPRC_sc_audio_pythonstr(data, len)

def CPRC_sc_audio_status(audio):
    """CPRC_sc_audio_status(CPRC_sc_audio * audio) -> enum CPRC_SC_STAT"""
    return _cerevoice_aud.CPRC_sc_audio_status(audio)

def CPRC_sc_audio_channel_type(audio):
    """CPRC_sc_audio_channel_type(CPRC_sc_audio * audio) -> enum CPRC_SC_CHANNEL"""
    return _cerevoice_aud.CPRC_sc_audio_channel_type(audio)

def CPRC_sc_audio_channel(audio, chan):
    """CPRC_sc_audio_channel(CPRC_sc_audio * audio, enum CPRC_SC_CHANNEL chan)"""
    return _cerevoice_aud.CPRC_sc_audio_channel(audio, chan)

def CPRC_sc_audio_start_time(audio):
    """CPRC_sc_audio_start_time(CPRC_sc_audio * audio) -> double"""
    return _cerevoice_aud.CPRC_sc_audio_start_time(audio)

def CPRC_sc_audio_delete(audio):
    """CPRC_sc_audio_delete(CPRC_sc_audio * audio)"""
    return _cerevoice_aud.CPRC_sc_audio_delete(audio)

def CPRC_sc_audio_play(player, cue):
    """CPRC_sc_audio_play(CPRC_sc_player * player, CPRC_sc_audio * cue) -> int"""
    return _cerevoice_aud.CPRC_sc_audio_play(player, cue)

def CPRC_sc_audio_cue(player, cue):
    """CPRC_sc_audio_cue(CPRC_sc_player * player, CPRC_sc_audio * cue) -> enum CPRCTHD_CUE"""
    return _cerevoice_aud.CPRC_sc_audio_cue(player, cue)

def CPRC_sc_sleep_msecs(msecs):
    """CPRC_sc_sleep_msecs(int msecs)"""
    return _cerevoice_aud.CPRC_sc_sleep_msecs(msecs)

def CPRC_sc_audio_busy(player):
    """CPRC_sc_audio_busy(CPRC_sc_player * player) -> int"""
    return _cerevoice_aud.CPRC_sc_audio_busy(player)

def CPRC_sc_audio_pauseon(player):
    """CPRC_sc_audio_pauseon(CPRC_sc_player * player) -> int"""
    return _cerevoice_aud.CPRC_sc_audio_pauseon(player)

def CPRC_sc_audio_pauseoff(player):
    """CPRC_sc_audio_pauseoff(CPRC_sc_player * player) -> int"""
    return _cerevoice_aud.CPRC_sc_audio_pauseoff(player)

def CPRC_sc_audio_paused(player):
    """CPRC_sc_audio_paused(CPRC_sc_player * player) -> int"""
    return _cerevoice_aud.CPRC_sc_audio_paused(player)

def CPRC_sc_audio_stop(player):
    """CPRC_sc_audio_stop(CPRC_sc_player * player) -> int"""
    return _cerevoice_aud.CPRC_sc_audio_stop(player)
class lock(_object):
    """Proxy of C++ lock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lock, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["lock"] = _cerevoice_aud.lock_lock_set
    __swig_getmethods__["lock"] = _cerevoice_aud.lock_lock_get
    if _newclass:
        lock = _swig_property(_cerevoice_aud.lock_lock_get, _cerevoice_aud.lock_lock_set)
    __swig_destroy__ = _cerevoice_aud.delete_lock
    __del__ = lambda self: None
lock_swigregister = _cerevoice_aud.lock_swigregister
lock_swigregister(lock)

class wavmono(_object):
    """Proxy of C++ wavmono class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wavmono, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wavmono, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frameIndex"] = _cerevoice_aud.wavmono_frameIndex_set
    __swig_getmethods__["frameIndex"] = _cerevoice_aud.wavmono_frameIndex_get
    if _newclass:
        frameIndex = _swig_property(_cerevoice_aud.wavmono_frameIndex_get, _cerevoice_aud.wavmono_frameIndex_set)
    __swig_setmethods__["maxFrameIndex"] = _cerevoice_aud.wavmono_maxFrameIndex_set
    __swig_getmethods__["maxFrameIndex"] = _cerevoice_aud.wavmono_maxFrameIndex_get
    if _newclass:
        maxFrameIndex = _swig_property(_cerevoice_aud.wavmono_maxFrameIndex_get, _cerevoice_aud.wavmono_maxFrameIndex_set)
    __swig_setmethods__["data"] = _cerevoice_aud.wavmono_data_set
    __swig_getmethods__["data"] = _cerevoice_aud.wavmono_data_get
    if _newclass:
        data = _swig_property(_cerevoice_aud.wavmono_data_get, _cerevoice_aud.wavmono_data_set)
    __swig_setmethods__["num_samples"] = _cerevoice_aud.wavmono_num_samples_set
    __swig_getmethods__["num_samples"] = _cerevoice_aud.wavmono_num_samples_get
    if _newclass:
        num_samples = _swig_property(_cerevoice_aud.wavmono_num_samples_get, _cerevoice_aud.wavmono_num_samples_set)
    __swig_setmethods__["sample_rate"] = _cerevoice_aud.wavmono_sample_rate_set
    __swig_getmethods__["sample_rate"] = _cerevoice_aud.wavmono_sample_rate_get
    if _newclass:
        sample_rate = _swig_property(_cerevoice_aud.wavmono_sample_rate_get, _cerevoice_aud.wavmono_sample_rate_set)

    def __init__(self):
        """__init__(wavmono self) -> wavmono"""
        this = _cerevoice_aud.new_wavmono()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cerevoice_aud.delete_wavmono
    __del__ = lambda self: None
wavmono_swigregister = _cerevoice_aud.wavmono_swigregister
wavmono_swigregister(wavmono)


def get_buffer(max_sz, sample_rate):
    """get_buffer(int max_sz, int sample_rate) -> wavmono *"""
    return _cerevoice_aud.get_buffer(max_sz, sample_rate)

def pythonstr(data, len, sample_rate):
    """pythonstr(wavedata * data, int len, int sample_rate) -> wavmono *"""
    return _cerevoice_aud.pythonstr(data, len, sample_rate)

def delete_buffer(data):
    """delete_buffer(wavmono * data)"""
    return _cerevoice_aud.delete_buffer(data)

def startrecording(data):
    """startrecording(wavmono * data) -> PortAudioStream *"""
    return _cerevoice_aud.startrecording(data)

def startplaying(data):
    """startplaying(wavmono * data) -> PortAudioStream *"""
    return _cerevoice_aud.startplaying(data)

def killstream(stream):
    """killstream(PortAudioStream * stream) -> int"""
    return _cerevoice_aud.killstream(stream)

def continueplaying(stream):
    """continueplaying(PortAudioStream * stream) -> PortAudioStream *"""
    return _cerevoice_aud.continueplaying(stream)

def beep(seconds, hertz, amplitude, sample_rate):
    """beep(float seconds, int hertz, float amplitude, int sample_rate) -> wavmono *"""
    return _cerevoice_aud.beep(seconds, hertz, amplitude, sample_rate)

def riff_load(fname):
    """riff_load(char * fname) -> wavmono *"""
    return _cerevoice_aud.riff_load(fname)

def riff_save(wav, fname):
    """riff_save(wavmono * wav, char const * fname)"""
    return _cerevoice_aud.riff_save(wav, fname)

def open_audiostream(sample_rate):
    """open_audiostream(int sample_rate) -> PABLIO_Stream *"""
    return _cerevoice_aud.open_audiostream(sample_rate)

def play_audiostream(audiostream, data, numsamples, l):
    """play_audiostream(PABLIO_Stream * audiostream, short * data, int numsamples, lock * l)"""
    return _cerevoice_aud.play_audiostream(audiostream, data, numsamples, l)

def close_audiostream(audiostream):
    """close_audiostream(PABLIO_Stream * audiostream)"""
    return _cerevoice_aud.close_audiostream(audiostream)

def lock_new():
    """lock_new() -> lock *"""
    return _cerevoice_aud.lock_new()

def lock_delete(l):
    """lock_delete(lock * l)"""
    return _cerevoice_aud.lock_delete(l)

def buffertostring(data):
    """buffertostring(wavmono * data) -> RCD_audio_string *"""
    return _cerevoice_aud.buffertostring(data)
# This file is compatible with both classic and new-style classes.


